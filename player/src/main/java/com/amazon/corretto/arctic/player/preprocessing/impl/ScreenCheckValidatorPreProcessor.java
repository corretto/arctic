/*
 *   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package com.amazon.corretto.arctic.player.preprocessing.impl;

import java.util.Set;
import javax.inject.Inject;
import javax.inject.Named;

import com.amazon.corretto.arctic.common.backend.ArcticScreenRecorder;
import com.amazon.corretto.arctic.common.backend.ArcticTestWindowFocusManager;
import com.amazon.corretto.arctic.common.gui.ShadeManager;
import com.amazon.corretto.arctic.common.gui.WorkbenchManager;
import com.amazon.corretto.arctic.common.model.event.ScreenshotCheck;
import com.amazon.corretto.arctic.player.backend.ImageComparator;
import com.amazon.corretto.arctic.player.control.TimeController;
import com.amazon.corretto.arctic.player.inject.InjectionKeys;
import com.amazon.corretto.arctic.player.model.ArcticRunningTest;
import com.amazon.corretto.arctic.player.model.TestStatusCode;
import com.amazon.corretto.arctic.player.preprocessing.ArcticPlayerPreProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A preprocessor that checks the contents of the screen before start issuing commands to validate the test is the one
 * we expect. It compares the image with the one generated by the firstSc preprocessor of the recorder
 */
public final class ScreenCheckValidatorPreProcessor implements ArcticPlayerPreProcessor {
    private static final Logger log = LoggerFactory.getLogger(ScreenCheckValidatorPreProcessor.class);

    public static final String NAME = "scValidator";
    private static final int PRIORITY = 50;

    private final WorkbenchManager wbManager;
    private final ShadeManager shadeManager;
    private final ArcticTestWindowFocusManager focusManager;
    private final ArcticScreenRecorder screenRecorder;
    private final ImageComparator imageComparator;
    private final TimeController timeController;
    private final long focusWait;
    private final boolean bypass;

    /**
     * Creates a new instance, used by the dependency injector.
     * @param wbManager Used to control the position of the workbench and to send it to the back.
     * @param shadeManager Used to replicate the position of the shades in the first sc.
     * @param focusManager Used to ensure the test window has focus.
     * @param screenRecorder To capture the are that matches the first sc image.
     * @param imageComparator To compare between the current image and the one that was recorded.
     * @param timeController To issue the wait commands after giving focus.
     * @param focusWait How much time to wait after giving focus before capturing the screen.
     * @param bypass If true, ignore the result and always let the test continue. This is dangerous, as it will cause
     *               mouse and keyboard events to be sent without confirmation they are being sent to the proper window.
     */
    @Inject
    public ScreenCheckValidatorPreProcessor(final WorkbenchManager wbManager, final ShadeManager shadeManager,
                                            final ArcticTestWindowFocusManager focusManager,
                                            final ArcticScreenRecorder screenRecorder,
                                            final ImageComparator imageComparator,
                                            final TimeController timeController,
                                            final @Named(InjectionKeys.PRE_SC_VALIDATOR_WAIT_FOCUS) long focusWait,
                                            final @Named(InjectionKeys.PRE_SC_VALIDATOR_BYPASS) boolean bypass) {
        this.wbManager = wbManager;
        this.shadeManager = shadeManager;
        this.focusManager = focusManager;
        this.screenRecorder = screenRecorder;
        this.imageComparator = imageComparator;
        this.timeController = timeController;
        this.focusWait = focusWait;
        this.bypass = bypass;
    }


    @Override
    public boolean preProcess(final ArcticRunningTest test) {
        log.debug("Checking if we match test {}:{}", test.getRecording().getTestName(), test.getRecording().getTestCase());
        wbManager.position(test.getRecording().getInitialSc().getWorkbench());
        shadeManager.position(test.getRecording().getInitialSc().getShades());
        timeController.waitFor(focusWait);
        focusManager.giveFocus(test.getRecording().getFocusPoint());
        timeController.waitFor(focusWait);
        final ScreenshotCheck sc = screenRecorder.capture(test.getRecording().getInitialSc().getSa());
        final boolean result = imageComparator.compare(sc, test.getRecording().getInitialSc(), test.getTestId(),
                test.getRecording().getScope());
        if (!result && bypass) {
            log.warn("Bypassing first sc");
        }
        return result || bypass;
    }

    @Override
    public int getPriority() {
        return PRIORITY;
    }

    @Override
    public String getName() {
        return NAME;
    }

    @Override
    public Set<TestStatusCode> getRegisteredStatuses() {
        return Set.of(TestStatusCode.STARTING);
    }
}
