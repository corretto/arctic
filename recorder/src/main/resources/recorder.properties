#
#   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License").
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# Defines where the test suite we run is located
arctic.common.repository.json.path = ./tests

# Name we used to save the test definition.
arctic.common.repository.json.file = Test.json

# Store tests using double \\ instead of / in the json files
arctic.common.repository.windows.legacy.mode = false

# Enable the Arctic command line interface
arctic.common.cmd.enabled = true

# Allow arctic to receive commands directly via console
arctic.common.cmd.console = true

# Disable all commands except for those specifically stated by the arctic.common.cmd.allowed list.
arctic.common.cmd.allowed.enabled = false

# List of commands to allow
arctic.common.cmd.allowed = *

# Disable all commands listed in the arctic.common.cmd.disallowed list.
arctic.common.cmd.disallowed.enabled = false

# Disable specific commands from the arctic command line. Blocking a first level command will block all subsequent
# subcommands, blocking "test" will also block "test run" and "test reset". To block only a subset, use "_" as a
# separator. An example would be to block only "test_run" allowing "test reset". This can be used with the
# arctic.common.cmd.allowed to allow a first level command and then disallow one or more second level ones.
arctic.common.cmd.disallowed =

# Apply a filter based on a regular expression
arctic.common.cmd.regex.enabled = false

# A regular expression that will be applied to the commands to determine whether they are allowed or not, a way to
# further fine-tune the allowed list command.
arctic.common.cmd.regex = .*

# Allow receiving commands via RMI. There are three valid values here:
# true: All RMI connections are allowed
# local_only: Bind the RMI server only to the loopback IP
# false: RMI connections are not allowed
arctic.common.cmd.rmi.enabled = false

# Name for the RMI commands listener
arctic.common.cmd.rmi.name = ArcticCmd

# Port for the RMI commands listener
arctic.common.cmd.rmi.port = 61099

# Name of the default session
arctic.common.session.default = arctic.session

# A margin of how close to the edge of the screen we can get with the workbench. If the workbench has an x coordinate
# value lower than the margin, when taking the screenshot, the position is assumed to be 0. This is useful because it
# allows us to capture things like the menubar on mac that doesn't allow us to position windows behind
arctic.common.screen.capture.margin.x = 0
arctic.common.screen.capture.margin.y = 0

# Define which backends we are going to use to record
# Values can be:
#   jnhMouse: Records Mouse press, release and click events.
#   jnhMouseMove: records mouse move and drag events.
#   jnhMouseWheel: records mouse wheel events.
#   jnhKeyboard: records keyboard press, release and type events.
#   sc: records screen check requests.
arctic.recorder.backend.recorders = jnhMouse, jnhMouseWheel, jnhMouseMove, jnhKeyboard, sc

# Defines which events we want during the recorder. Check ArcticEvent.java for values.
arctic.recorder.backend.recordingMode = 0x13F07

# Defines which provider to use when calculating the position of the test window. The distance between the workbench Y
# position and the test Y position is the offset. It doesn't need to be exact, but this point will be used to click
# whenever we need to give focus to the test window.
# Values can be:
#   fixed: assume the test window is a fixed distance from the workbench
#   awt: use AwtRobot to scan downwards starting in the top middle of the workbench
arctic.recorder.offset.provider = awt

# Value for the offset
arctic.recorder.offset.fixed.x = 50

# Adds extra offset when calculating the test window position. Used to avoid window decorations.
arctic.recorder.offset.awt.extra = 45

# Some systems apply color profiles before the data reaches AwtRobot, causing the color in the screenshot to not match
# the one we send. This will attempt to correct it by performing a color correction test on startup.
arctic.recorder.offset.awt.colorCorrection = True

# Defines which mode to use to issue start/stop and other commands to the recorder.
# Values can be:
#   jnh: A jnh hook is registered and keyboard is mapped
arctic.recorder.control.provider = jnh

# Automatically stops the recording when we receive a signal the test has stopped. If the signal received was for a
# failure, the test will be automatically discarded
arctic.recorder.control.autoStopRecording = true

# Keycode we will check to start a recording.
arctic.recorder.control.jnh.startKeyCode = 44

# Keycode we will check to stop a recording.
arctic.recorder.control.jnh.stopKeyCode = 44

# Keycode we will check to indicate we want a new screenCheck.
arctic.recorder.control.jnh.screenCheckKeyCode = 45

# Keycode we will check to spawn a new shade.
arctic.recorder.control.jnh.spawnShadeKeyCode = 46

# Keycode we will check to discard the current recording.
arctic.recorder.control.jnh.discardKeyCode = 47

# Keycode we will check to start a recording
arctic.recorder.control.jnh.modifiers = 42, 56

# List with all the post processors we want to enable. Recommended to keep default values.
# Values are:
#   tsFix: Changes all timestamps to be relative to the test recording time.
#   dupRemoval: Removes duplicated move and drag events.
#   tailCleaner: Removes those events that happen after the last mouse click. ** Unsafe **
#   kbFix: Ensures keyboard coherence (no unpressed keys being released, no keys left pressed at the end of the test)
#   mouseFix: Ensures mouse coherence (same as kbFix, for mouse buttons)
#   scHash: Saves a hash for the different images that can be use to perform the comparison.
#   scSave: Saves the images captured to disk.
#   save: Saves the actual test to disk.
#   wbFix: Ensures the workbench is sent to back once the recorder is completed.
#
arctic.recorder.post.enabled = tsFix, dupRemoval, kbFix, mouseFix, scHash, scSave, save, wbFix

# Defines the algorithm to use for calculating image hashes.
# Possible values are those in the java security digest.
arctic.recorder.post.scHash.algorithm = MD5

# Format to use to save the images. Values are those supported by ImageIO.
arctic.recorder.post.scSave.format = png

# Extension to use when saving the images.
arctic.recorder.post.scSave.extension = .png

# Marks whether to use zip compression on the events file
arctic.recorder.post.save.zip = True

# Name we will use to save the test data.
arctic.recorder.post.save.eventsFile = Events.json

# List with all the pre processors we want to enable. Recommended to keep default values.
# Values are:
#   init: performs the initialization of basic fields for the test.
#   focus: issues an awt event to give the test window focus and saves it.
#   firstSc: saves a firstScreenshotCheck of the test
arctic.recorder.pre.enabled = init

# Defines which events we mark by default as the preferred playback. Check ArcticEvent.java for values.
arctic.recorder.pre.init.preferredPlayMode = 0x13E06

# Removes events from the start and end of the timeline, either for mouse or keyboards. These removals are applied
# after the coherence checks, so they can lead to releases with no presses or vice-versa. Use carefully.
arctic.recorder.pre.init.truncate.kb.start = 0
arctic.recorder.pre.init.truncate.kb.end = 0
arctic.recorder.pre.init.truncate.mouse.start = 0
arctic.recorder.pre.init.truncate.mouse.end = 0

# Controls the default timings for the tests.
# How much time since we receive notification that the test has started until we start reproduction. This is useful
# because we might get the notification of the test starting before it is drawn on the screen.
arctic.recorder.pre.init.timings.startDelayMs = 300

# In some circumstances where the events are too close together or there are shades to reposition, capturing the screen
# might return an image that is still being updated. This allows the robot to wait until we capture the image
arctic.recorder.pre.init.timings.scDelayMs = 50

# Asking the jvm to sleep for a really small amount of time might end up being a waste. With this option we can
# determine where we want to stop waiting.
arctic.recorder.pre.init.timings.minWaitNs = 1000000

# This parameter can be used to skip sections of the timeline where there is no apparent activity. If two events are
# separated by more than maxWaitNs, the system will only wait maxWaitNs.
# A value of -1 means we will not try to speed up the timeline
arctic.recorder.pre.init.timings.maxWaitNs = -1

# How many milliseconds we wait before capturing the first ScreenCheck for identification
# This time is needed for the system to bring the test window to the foreground
arctic.recorder.pre.firstSc.delay = 50

# How many additional pixels below the focus point we will get for identification purposes.
arctic.recorder.pre.firstSc.match = 50

# Which manager we use to give focus to the first test we run
# awt: Attempt to give focus using awt to click in the window
# dummy: do nothing
arctic.common.backend.focus.manager = awt

# Default window properties for the Workbench.
arctic.common.gui.wb.default.title = Workbench
arctic.common.arctic.gui.wb.default.color = 0xE6F0FA
arctic.common.arctic.gui.wb.default.width = 800
arctic.common.arctic.gui.wb.default.height = 800

# Default window properties for the shades.
arctic.common.gui.shade.default.title = Shade
arctic.common.gui.shade.default.color = 0xF2FFE6
arctic.common.gui.shade.default.width = 250
arctic.common.gui.shade.default.height = 50

# Defines the default scope. This value should not be changed here, but override by the arctic.scope system property.
arctic.common.repository.scope = ${sys:arctic.scope:-default}
